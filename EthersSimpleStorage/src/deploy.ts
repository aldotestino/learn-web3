import dotenv from 'dotenv';
import * as ethers from 'ethers';
import * as fs from 'fs';
import { CONTRACT_ABI_PATH, CONTRACT_BIN_PATH, JSON_KEY_PATH } from './vars';

dotenv.config();

async function main() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY!, provider);

  /* USING ENCRYPTED KEY */
  // const encryptedJson = fs.readFileSync(JSON_KEY_PATH, 'utf-8');
  // let wallet = ethers.Wallet.fromEncryptedJsonSync(encryptedJson, process.env.PRIVATE_KEY_PASSWORD!);
  // wallet = await wallet.connect(provider);

  const abi = fs.readFileSync(CONTRACT_ABI_PATH, 'utf-8');
  const binary = fs.readFileSync(CONTRACT_BIN_PATH, 'utf-8');

  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

  console.log('ðŸš€ deployng...');
  const contract = await contractFactory.deploy();
  await contract.deployTransaction.wait(1);
  console.log(`Contract address: ${contract.address}`);

  /* RAW DEPLOY WITH TRANSACTION DATA
  const nonce = await wallet.getTransactionCount();
  const tx: ethers.providers.TransactionRequest = {
    nonce, // numero di transazione
    gasPrice: 20000000000, // Ganache gas price
    gasLimit: 1000000,
    to: undefined,
    value: 0,
    data: '0x608060405234801561001057600080fd5b50610945806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780636f760f41146100965780639e7a13ad146100b2578063b2ac62ef146100e3575b600080fd5b610064610113565b60405161007191906102b3565b60405180910390f35b610094600480360381019061008f919061030e565b61011d565b005b6100b060048036038101906100ab9190610481565b610127565b005b6100cc60048036038101906100c7919061030e565b6101b0565b6040516100da929190610565565b60405180910390f35b6100fd60048036038101906100f89190610595565b61026c565b60405161010a91906102b3565b60405180910390f35b6000600254905090565b8060028190555050565b6000604051806040016040528083815260200184815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908161018691906107ea565b5050508060018360405161019a91906108f8565b9081526020016040518091039020819055505050565b600081815481106101c057600080fd5b90600052602060002090600202016000915090508060000154908060010180546101e99061060d565b80601f01602080910402602001604051908101604052809291908181526020018280546102159061060d565b80156102625780601f1061023757610100808354040283529160200191610262565b820191906000526020600020905b81548152906001019060200180831161024557829003601f168201915b5050505050905082565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000819050919050565b6102ad8161029a565b82525050565b60006020820190506102c860008301846102a4565b92915050565b6000604051905090565b600080fd5b600080fd5b6102eb8161029a565b81146102f657600080fd5b50565b600081359050610308816102e2565b92915050565b600060208284031215610324576103236102d8565b5b6000610332848285016102f9565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038e82610345565b810181811067ffffffffffffffff821117156103ad576103ac610356565b5b80604052505050565b60006103c06102ce565b90506103cc8282610385565b919050565b600067ffffffffffffffff8211156103ec576103eb610356565b5b6103f582610345565b9050602081019050919050565b82818337600083830152505050565b600061042461041f846103d1565b6103b6565b9050828152602081018484840111156104405761043f610340565b5b61044b848285610402565b509392505050565b600082601f8301126104685761046761033b565b5b8135610478848260208601610411565b91505092915050565b60008060408385031215610498576104976102d8565b5b600083013567ffffffffffffffff8111156104b6576104b56102dd565b5b6104c285828601610453565b92505060206104d3858286016102f9565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105175780820151818401526020810190506104fc565b83811115610526576000848401525b50505050565b6000610537826104dd565b61054181856104e8565b93506105518185602086016104f9565b61055a81610345565b840191505092915050565b600060408201905061057a60008301856102a4565b818103602083015261058c818461052c565b90509392505050565b6000602082840312156105ab576105aa6102d8565b5b600082013567ffffffffffffffff8111156105c9576105c86102dd565b5b6105d584828501610453565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061062557607f821691505b602082108103610638576106376105de565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610663565b6106aa8683610663565b95508019841693508086168417925050509392505050565b6000819050919050565b60006106e76106e26106dd8461029a565b6106c2565b61029a565b9050919050565b6000819050919050565b610701836106cc565b61071561070d826106ee565b848454610670565b825550505050565b600090565b61072a61071d565b6107358184846106f8565b505050565b5b818110156107595761074e600082610722565b60018101905061073b565b5050565b601f82111561079e5761076f8161063e565b61077884610653565b81016020851015610787578190505b61079b61079385610653565b83018261073a565b50505b505050565b600082821c905092915050565b60006107c1600019846008026107a3565b1980831691505092915050565b60006107da83836107b0565b9150826002028217905092915050565b6107f3826104dd565b67ffffffffffffffff81111561080c5761080b610356565b5b610816825461060d565b61082182828561075d565b600060209050601f8311600181146108545760008415610842578287015190505b61084c85826107ce565b8655506108b4565b601f1984166108628661063e565b60005b8281101561088a57848901518255600182019150602085019450602081019050610865565b868310156108a757848901516108a3601f8916826107b0565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006108d2826104dd565b6108dc81856108bc565b93506108ec8185602086016104f9565b80840191505092915050565b600061090482846108c7565b91508190509291505056fea26469706673582212204135547af788cbdf9e0258a3b0160acba27351abec196da820e343752bdceff564736f6c634300080f0033',
    chainId: 1337
  };

  const sentTxResponse = await wallet.sendTransaction(tx);
  await sentTxResponse.wait(1);
  console.log(sentTxResponse);
  */

  const currentFavouriteNumber: ethers.BigNumber = await contract.retrieve();
  console.log(`Current favourite number is: ${currentFavouriteNumber.toString()}`);

  console.log('Updating favourite number...');
  const transactionResponse = await contract.store('7');
  const transactionReceipt = await transactionResponse.wait(1);

  const updatedFavouriteNumber: ethers.BigNumber = await contract.retrieve();
  console.log(`Updated favourite number is: ${updatedFavouriteNumber.toString()}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
